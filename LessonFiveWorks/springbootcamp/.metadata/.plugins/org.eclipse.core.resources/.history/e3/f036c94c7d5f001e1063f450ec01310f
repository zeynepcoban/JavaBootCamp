package Kodlama.io.Devs.business.concretes;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import Kodlama.io.Devs.business.abstracts.ProgrammingLanguageService;
import Kodlama.io.Devs.business.requests.CreateProgrammingLanguageRequest;
import Kodlama.io.Devs.business.requests.DeleteProgrammingLanguageRequest;
import Kodlama.io.Devs.business.requests.GetByIdProgrammingLanguageRequest;
import Kodlama.io.Devs.business.requests.UpdateProgrammingLanguageRequest;
import Kodlama.io.Devs.business.responses.GetAllProgrammingLanguageResponse;
import Kodlama.io.Devs.business.responses.GetByIdProgrammingLanguageResponse;
import Kodlama.io.Devs.dataAccess.abstracts.ProgrammingLanguageRepository;
import Kodlama.io.Devs.entities.concretes.ProgrammingLanguage;

@Service
public class ProgrammingLanguageManager implements ProgrammingLanguageService {
	private ProgrammingLanguageRepository programmingLanguageRepository;

	@Autowired
	public ProgrammingLanguageManager(ProgrammingLanguageRepository programmingLanguageRepository) {
		
		this.programmingLanguageRepository = programmingLanguageRepository;
	}

	@Override
	public List<GetAllProgrammingLanguageResponse> getAll() {

		List<ProgrammingLanguage> languages =programmingLanguageRepository.findAll();
		List<GetAllProgrammingLanguageResponse> languagesResponses = new ArrayList<GetAllProgrammingLanguageResponse>();

		for (ProgrammingLanguage programmingLanguage : languages) {
			GetAllProgrammingLanguageResponse responseItem = new GetAllProgrammingLanguageResponse();
			responseItem.setId(programmingLanguage.getId());
			responseItem.setName(programmingLanguage.getName());

			languagesResponses.add(responseItem);
		}
		return languagesResponses;
	}

	@Override
	public void add(CreateProgrammingLanguageRequest createProgrammingLanguageRequest) throws Exception {
		ProgrammingLanguage language = new ProgrammingLanguage();
		language.setName(createProgrammingLanguageRequest.getName());
		if (language.getName().isEmpty()) {
			throw new Exception("Name cannot be empty");
		}
		for(GetAllProgrammingLanguageResponse languageResponse : getAll()) {
			if(languageResponse.getName().equals(language.getName())) {
				throw new Exception("Language already exists");
			}
			
		}
		this.programmingLanguageRepository.save(language);

	}

	@Override
	public void update(UpdateProgrammingLanguageRequest updateProgrammingLanguageRequest) {
		//ProgrammingLanguage language=new ProgrammingLanguage();
		//for(GetAllProgrammingLanguageResponse languageResponse : getAll()) {
		/*
		 * if (language != null) {
		 * language.setName(updateProgrammingLanguageRequest.getName());
		 * this.programmingLanguageRepository.save(language);
		 */
		Optional<ProgrammingLanguage> optionalLanguage = programmingLanguageRepository.findById(updateProgrammingLanguageRequest.getId());

	
	    if (optionalLanguage.isPresent()) {
	        ProgrammingLanguage language = optionalLanguage.get();
	        language.setName(updateProgrammingLanguageRequest.getName());
	        this.programmingLanguageRepository.save(language);
	    } else {
	
	    }
	}

	

	@Override
	public void delete(DeleteProgrammingLanguageRequest deleteProgramminLanguageRequest) {
		this.programmingLanguageRepository.deleteById(deleteProgramminLanguageRequest.getId());

	}


	@Override
	public GetByIdProgrammingLanguageResponse getById(
			GetByIdProgrammingLanguageRequest getByIdProgrammingLanguageRequest) {
		ProgrammingLanguage language = programmingLanguageRepository.findById(getByIdProgrammingLanguageRequest.getId()).get();
		GetByIdProgrammingLanguageResponse languagesResponse = new GetByIdProgrammingLanguageResponse();
		languagesResponse.setId(language.getId());
		return languagesResponse;
	}
	}



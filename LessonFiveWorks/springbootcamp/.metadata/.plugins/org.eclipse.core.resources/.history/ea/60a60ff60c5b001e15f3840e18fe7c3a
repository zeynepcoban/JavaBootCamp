package Kodlama.io.Devs.business.concretes;

import java.util.ArrayList;
import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import Kodlama.io.Devs.business.abstracts.ProgrammingLanguageService;
import Kodlama.io.Devs.business.requests.CreateProgrammingLanguageRequest;
import Kodlama.io.Devs.business.requests.DeleteProgrammingLanguageRequest;
import Kodlama.io.Devs.business.requests.GetByIdProgrammingLanguageRequest;
import Kodlama.io.Devs.business.requests.UpdateProgrammingLanguageRequest;
import Kodlama.io.Devs.business.responses.GetAllProgrammingLanguageResponse;
import Kodlama.io.Devs.business.responses.GetByIdProgrammingLanguageResponse;
import Kodlama.io.Devs.dataAccess.abstracts.ProgrammingLanguageRepository;
import Kodlama.io.Devs.entities.concretes.ProgrammingLanguage;

@Service
public class ProgrammingLanguageManager implements ProgrammingLanguageService {
	private ProgrammingLanguageRepository programmingLanguageRepository;

	@Autowired
	public ProgrammingLanguageManager(ProgrammingLanguageRepository programmingLanguageRepository) {
		
		this.programmingLanguageRepository = programmingLanguageRepository;
	}

	@Override
	public List<GetAllProgrammingLanguageResponse> getAll() {

		List<ProgrammingLanguage> languages =programmingLanguageRepository.findAll();
		List<GetAllProgrammingLanguageResponse> languagesResponses = new ArrayList<GetAllProgrammingLanguageResponse>();

		for (ProgrammingLanguage programmingLanguage : languages) {
			GetAllProgrammingLanguageResponse responseItem = new GetAllProgrammingLanguageResponse();
			responseItem.setId(programmingLanguage.getId());
			responseItem.setName(programmingLanguage.getName());

			languagesResponses.add(responseItem);
		}
		return languagesResponses;
	}

	@Override
	public void add(CreateProgrammingLanguageRequest createProgrammingLanguageRequest) throws Exception {
		ProgrammingLanguage language = new ProgrammingLanguage();
		language.setName(createProgrammingLanguageRequest.getName());
		if (language.getName().isEmpty()) {
			throw new Exception("Name cannot be empty");
		}
		for(GetAllProgrammingLanguageResponse languageResponse : getAll()) {
			if(languageResponse.getName().equals(language.getName())) {
				throw new Exception("Language already exists");
			}
			
		}
		this.programmingLanguageRepository.save(language);

	}

	@Override
	public void update(UpdateProgrammingLanguageRequest updateProgrammingLanguageRequest) {
		ProgrammingLanguage language=new ProgrammingLanguage();
		for(GetAllProgrammingLanguageResponse languageResponse : getAll()) {
			if(languageResponse.getName()==updateProgrammingLanguageRequest.getName()) {
				language.setName(updateProgrammingLanguageRequest.getName());
			}
		}
		this.programmingLanguageRepository.save(language);

	}

	@Override
	public void delete(DeleteProgrammingLanguageRequest deleteProgrammingLanguageRequest) {
		this.programmingLanguageRepository.deleteById(deleteProgrammingLanguageRequest.getId());

	}

	@Override
	public GetByIdProgrammingLanguageResponse getById(
			GetByIdProgrammingLanguageRequest getByIdProgrammingLanguageRequest) {
	 ProgrammingLanguage language=programmingLanguageRepository.findById(getByIdProgrammingLanguageRequest.getId()).get();
	 GetByIdProgrammingLanguageResponse languageResponse=new GetByIdProgrammingLanguageResponse();
	 languageResponse.setId(language.getId());
		return languageResponse;
	}

}
